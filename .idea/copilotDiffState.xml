<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/models.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/models.py" />
              <option name="originalContent" value="# app/models.py&#10;from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, Float&#10;from sqlalchemy.orm import relationship, declarative_base&#10;&#10;Base = declarative_base()&#10;&#10;class Customer(Base):&#10;    __tablename__ = 'customers'&#10;    id = Column(Integer, primary_key=True)&#10;    name = Column(String(100), nullable=False)&#10;    email = Column(String(100), unique=True, nullable=False)&#10;    phone = Column(String(20))&#10;    shipments = relationship('Shipment', back_populates='customer')&#10;&#10;class Warehouse(Base):&#10;    __tablename__ = 'warehouses'&#10;    id = Column(Integer, primary_key=True)&#10;    name = Column(String(100), nullable=False)&#10;    location = Column(String(200), nullable=False)&#10;    shipments = relationship('Shipment', back_populates='warehouse')&#10;&#10;class Route(Base):&#10;    __tablename__ = 'routes'&#10;    id = Column(Integer, primary_key=True)&#10;    origin = Column(String(200), nullable=False)&#10;    destination = Column(String(200), nullable=False)&#10;    distance_km = Column(Float)&#10;    shipments = relationship('Shipment', back_populates='route')&#10;&#10;class Driver(Base):&#10;    __tablename__ = 'drivers'&#10;    id = Column(Integer, primary_key=True)&#10;    name = Column(String(100), nullable=False)&#10;    phone = Column(String(20))&#10;    license_number = Column(String(50), unique=True)&#10;    shipments = relationship('Shipment', back_populates='driver')&#10;&#10;class Vehicle(Base):&#10;    __tablename__ = 'vehicles'&#10;    id = Column(Integer, primary_key=True)&#10;    plate_number = Column(String(20), unique=True, nullable=False)&#10;    type = Column(String(50))&#10;    capacity = Column(Integer)&#10;    shipments = relationship('Shipment', back_populates='vehicle')&#10;&#10;class Shipment(Base):&#10;    __tablename__ = 'shipments'&#10;    id = Column(Integer, primary_key=True)&#10;    customer_id = Column(Integer, ForeignKey('customers.id'))&#10;    warehouse_id = Column(Integer, ForeignKey('warehouses.id'))&#10;    route_id = Column(Integer, ForeignKey('routes.id'))&#10;    driver_id = Column(Integer, ForeignKey('drivers.id'))&#10;    vehicle_id = Column(Integer, ForeignKey('vehicles.id'))&#10;    status = Column(String(50), default='pending')&#10;    created_at = Column(DateTime)&#10;    updated_at = Column(DateTime)&#10;    estimated_delivery = Column(DateTime)&#10;    customer = relationship('Customer', back_populates='shipments')&#10;    warehouse = relationship('Warehouse', back_populates='shipments')&#10;    route = relationship('Route', back_populates='shipments')&#10;    trackings = relationship('Tracking', back_populates='shipment')&#10;    driver = relationship('Driver', back_populates='shipments')&#10;    vehicle = relationship('Vehicle', back_populates='shipments')&#10;&#10;class Tracking(Base):&#10;    __tablename__ = 'trackings'&#10;    id = Column(Integer, primary_key=True)&#10;    shipment_id = Column(Integer, ForeignKey('shipments.id'))&#10;    status = Column(String(50))&#10;    location = Column(String(200))&#10;    timestamp = Column(DateTime)&#10;    shipment = relationship('Shipment', back_populates='trackings')&#10;&#10;class User(Base):&#10;    __tablename__ = 'users'&#10;    id = Column(Integer, primary_key=True)&#10;    username = Column(String(100), unique=True, nullable=False)&#10;    password = Column(String(100), nullable=False)  # For demo, store plain text&#10;    role = Column(String(20), nullable=False)  # e.g., admin, manager, driver&#10;" />
              <option name="updatedContent" value="# app/models.py&#10;from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, Float&#10;from sqlalchemy.orm import relationship, declarative_base&#10;&#10;Base = declarative_base()&#10;&#10;class Customer(Base):&#10;    __tablename__ = 'customers'&#10;    id = Column(Integer, primary_key=True)&#10;    name = Column(String(100), nullable=False)&#10;    email = Column(String(100), unique=True, nullable=False)&#10;    phone = Column(String(20))&#10;    shipments = relationship('Shipment', back_populates='customer')&#10;&#10;class Warehouse(Base):&#10;    __tablename__ = 'warehouses'&#10;    id = Column(Integer, primary_key=True)&#10;    name = Column(String(100), nullable=False)&#10;    location = Column(String(200), nullable=False)&#10;    shipments = relationship('Shipment', back_populates='warehouse')&#10;&#10;class Route(Base):&#10;    __tablename__ = 'routes'&#10;    id = Column(Integer, primary_key=True)&#10;    origin = Column(String(200), nullable=False)&#10;    destination = Column(String(200), nullable=False)&#10;    distance_km = Column(Float)&#10;    shipments = relationship('Shipment', back_populates='route')&#10;&#10;class Driver(Base):&#10;    __tablename__ = 'drivers'&#10;    id = Column(Integer, primary_key=True)&#10;    name = Column(String(100), nullable=False)&#10;    phone = Column(String(20))&#10;    license_number = Column(String(50), unique=True)&#10;    shipments = relationship('Shipment', back_populates='driver')&#10;&#10;class Vehicle(Base):&#10;    __tablename__ = 'vehicles'&#10;    id = Column(Integer, primary_key=True)&#10;    plate_number = Column(String(20), unique=True, nullable=False)&#10;    type = Column(String(50))&#10;    capacity = Column(Integer)&#10;    shipments = relationship('Shipment', back_populates='vehicle')&#10;&#10;class Shipment(Base):&#10;    __tablename__ = 'shipments'&#10;    id = Column(Integer, primary_key=True)&#10;    customer_id = Column(Integer, ForeignKey('customers.id'))&#10;    warehouse_id = Column(Integer, ForeignKey('warehouses.id'))&#10;    route_id = Column(Integer, ForeignKey('routes.id'))&#10;    driver_id = Column(Integer, ForeignKey('drivers.id'))&#10;    vehicle_id = Column(Integer, ForeignKey('vehicles.id'))&#10;    status = Column(String(50), default='pending')&#10;    created_at = Column(DateTime)&#10;    updated_at = Column(DateTime)&#10;    estimated_delivery = Column(DateTime)&#10;    customer = relationship('Customer', back_populates='shipments')&#10;    warehouse = relationship('Warehouse', back_populates='shipments')&#10;    route = relationship('Route', back_populates='shipments')&#10;    trackings = relationship('Tracking', back_populates='shipment')&#10;    driver = relationship('Driver', back_populates='shipments')&#10;    vehicle = relationship('Vehicle', back_populates='shipments')&#10;&#10;class Tracking(Base):&#10;    __tablename__ = 'trackings'&#10;    id = Column(Integer, primary_key=True)&#10;    shipment_id = Column(Integer, ForeignKey('shipments.id'))&#10;    status = Column(String(50))&#10;    location = Column(String(200))&#10;    timestamp = Column(DateTime)&#10;    shipment = relationship('Shipment', back_populates='trackings')&#10;&#10;class User(Base):&#10;    __tablename__ = 'users'&#10;    id = Column(Integer, primary_key=True)&#10;    username = Column(String(100), unique=True, nullable=False)&#10;    password = Column(String(100), nullable=False)  # For demo, store plain text&#10;    role = Column(String(20), nullable=False)  # e.g., admin, manager, driver&#10;&#10;class Inventory(Base):&#10;    __tablename__ = 'inventories'&#10;    id = Column(Integer, primary_key=True)&#10;    warehouse_id = Column(Integer, ForeignKey('warehouses.id'))&#10;    item_name = Column(String(100), nullable=False)&#10;    quantity = Column(Integer, nullable=False)&#10;    last_updated = Column(DateTime)&#10;    warehouse = relationship('Warehouse')&#10;&#10;class ShipmentStatusHistory(Base):&#10;    __tablename__ = 'shipment_status_histories'&#10;    id = Column(Integer, primary_key=True)&#10;    shipment_id = Column(Integer, ForeignKey('shipments.id'))&#10;    status = Column(String(50), nullable=False)&#10;    timestamp = Column(DateTime, nullable=False)&#10;    shipment = relationship('Shipment')" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>